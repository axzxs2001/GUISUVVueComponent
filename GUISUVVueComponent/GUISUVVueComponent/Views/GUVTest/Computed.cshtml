
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>基础</title>

    <script src="~/lib/jquery/dist/jquery.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
    <script src="~/lib/vue/dist/vue.js"></script>
    <link href="~/lib/bootstrap/dist/css/bootstrap.css" rel="stylesheet" />

</head>
<body>
    <hr style="border:1px solid #f00" />
    <div id="example-1">
        <p>Original message: "{{ message }}"</p>
        <p>Computed reversed message: "{{ reversedMessage }}"</p>
        <p>{{time0}}</p>
        <p>{{time1}}</p>
        <p>{{time2()}}</p>
    </div>
    <hr style="border:1px solid #f00" />
    <div id="example-2">
        <p>
            Ask a yes/no question:
            <input v-model="question">
        </p>
        <p>{{ answer }}</p>
    </div>
    <hr style="border:1px solid #f00" />
    <div id="example-3" style="width:400px">
        <h1>ajax验证用户名密码</h1>
        <p>
            <div class="input-group">
                <span class="input-group-addon" id="basic-addon1">用户名</span>
                <input v-model="question" type="text" class="form-control" placeholder="Username" aria-describedby="basic-addon1">
            </div>
            <span v-html="answer"></span>
        </p>

    </div>
    <hr style="border:1px solid #f00" />
    <script src="https://unpkg.com/axios@0.12.0/dist/axios.min.js"></script>
    <script src="https://unpkg.com/lodash@4.13.1/lodash.min.js"></script>
    <script>
        var app1 = new Vue({
            el: '#example-1',
            data: {
                message: "123456",
                time0: Date.now()
            },
            computed: {
                reversedMessage: {
                    get: function () {
                        return this.message.split('').reverse().join('')
                    },
                    set: function (newValue) {

                        this.message = newValue;
                    }
                },
                time1: {
                    get: function () {
                        return Date.now();
                    }
                }
            },
            methods:
            {
                time2: function () {
                    return Date.now();
                }
            }
        })

        var app2 = new Vue({
            el: '#example-2',
            data: {
                question: "",
                answer: ""
            },
            watch: {
                // 如果 question 发生改变，这个函数就会运行
                question: function (newQuestion) {
                    this.answer = 'Waiting for you to stop typing...'
                    this.getAnswer()
                }
            },
            methods: {
                // _.debounce 是一个通过 lodash 限制操作频率的函数。
                // 在这个例子中，我们希望限制访问yesno.wtf/api的频率
                // ajax请求直到用户输入完毕才会发出
                // 学习更多关于 _.debounce function (and its cousin
                // _.throttle), 参考: https://lodash.com/docs#debounce
                getAnswer: _.debounce(
                    function () {
                        var vm = this;
                        vm.answer = 'Thinking...'
                        axios.get('/answerquestion', {
                            params: {
                                value: vm.question
                            }
                        })
                            .then(function (response) {
                                console.log(response.data)
                                vm.answer = _.capitalize(response.data)
                            })
                            .catch(function (error) {
                                vm.answer = 'Error! Could not reach the API. ' + error
                            })
                    },
                    // 这是我们为用户停止输入等待的毫秒数
                    500
                )

            }

        })

        //验证用户名是否存在
        var app3 = new Vue({
            el: '#example-3',
            data: {
                question: "",
                answer: ""
            },
            watch: {
                // 如果 question 发生改变，这个函数就会运行
                question: function (newQuestion) {
                    this.answer = '正在核验中……'
                    this.getAnswer()
                }
            },
            methods: {
                // _.debounce 是一个通过 lodash 限制操作频率的函数。
                // 在这个例子中，我们希望限制访问yesno.wtf/api的频率
                // ajax请求直到用户输入完毕才会发出
                // 学习更多关于 _.debounce function (and its cousin
                // _.throttle), 参考: https://lodash.com/docs#debounce
                getAnswer: _.debounce(
                    function () {
                        var vm = this;
                        vm.answer = '再次正在核验中……'
                        $.get('/validusername', {
                            userName: vm.question
                        }, function (result) {
                            console.log(result)
                            if (result) {
                                vm.answer = '<font style="color:red;">用户名已存在，请更换！</font>';
                            }
                            else {
                                vm.answer = "此用户名可用!";
                            }
                        })
                    },
                    // 这是我们为用户停止输入等待的毫秒数
                    500
                )
            }
        })
    </script>
</body>
</html>
